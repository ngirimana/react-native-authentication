{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"../ui/Button\";\nimport Input from \"./Input\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction AuthForm(_ref) {\n  var isLogin = _ref.isLogin,\n      onSubmit = _ref.onSubmit,\n      credentialsInvalid = _ref.credentialsInvalid;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      enteredEmail = _useState2[0],\n      setEnteredEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      enteredConfirmEmail = _useState4[0],\n      setEnteredConfirmEmail = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      enteredPassword = _useState6[0],\n      setEnteredPassword = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      enteredConfirmPassword = _useState8[0],\n      setEnteredConfirmPassword = _useState8[1];\n\n  var emailIsInvalid = credentialsInvalid.email,\n      emailsDontMatch = credentialsInvalid.confirmEmail,\n      passwordIsInvalid = credentialsInvalid.password,\n      passwordsDontMatch = credentialsInvalid.confirmPassword;\n\n  function updateInputValueHandler(inputType, enteredValue) {\n    switch (inputType) {\n      case 'email':\n        setEnteredEmail(enteredValue);\n        break;\n\n      case 'confirmEmail':\n        setEnteredConfirmEmail(enteredValue);\n        break;\n\n      case 'password':\n        setEnteredPassword(enteredValue);\n        break;\n\n      case 'confirmPassword':\n        setEnteredConfirmPassword(enteredValue);\n        break;\n    }\n  }\n\n  function submitHandler() {\n    onSubmit({\n      email: enteredEmail,\n      confirmEmail: enteredConfirmEmail,\n      password: enteredPassword,\n      confirmPassword: enteredConfirmPassword\n    });\n  }\n\n  return _jsx(View, {\n    style: styles.form,\n    children: _jsxs(View, {\n      children: [_jsx(Input, {\n        label: \"Email Address\",\n        onUpdateValue: updateInputValueHandler.bind(this, 'email'),\n        value: enteredEmail,\n        keyboardType: \"email-address\",\n        isInvalid: emailIsInvalid\n      }), !isLogin && _jsx(Input, {\n        label: \"Confirm Email Address\",\n        onUpdateValue: updateInputValueHandler.bind(this, 'confirmEmail'),\n        value: enteredConfirmEmail,\n        keyboardType: \"email-address\",\n        isInvalid: emailsDontMatch\n      }), _jsx(Input, {\n        label: \"Password\",\n        onUpdateValue: updateInputValueHandler.bind(this, 'password'),\n        secure: true,\n        value: enteredPassword,\n        isInvalid: passwordIsInvalid\n      }), !isLogin && _jsx(Input, {\n        label: \"Confirm Password\",\n        onUpdateValue: updateInputValueHandler.bind(this, 'confirmPassword'),\n        secure: true,\n        value: enteredConfirmPassword,\n        isInvalid: passwordsDontMatch\n      }), _jsx(View, {\n        style: styles.buttons,\n        children: _jsx(Button, {\n          onPress: submitHandler,\n          children: isLogin ? 'Log In' : 'Sign Up'\n        })\n      })]\n    })\n  });\n}\n\nexport default AuthForm;\nvar styles = StyleSheet.create({\n  buttons: {\n    marginTop: 12\n  }\n});","map":{"version":3,"names":["useState","Button","Input","AuthForm","isLogin","onSubmit","credentialsInvalid","enteredEmail","setEnteredEmail","enteredConfirmEmail","setEnteredConfirmEmail","enteredPassword","setEnteredPassword","enteredConfirmPassword","setEnteredConfirmPassword","emailIsInvalid","email","emailsDontMatch","confirmEmail","passwordIsInvalid","password","passwordsDontMatch","confirmPassword","updateInputValueHandler","inputType","enteredValue","submitHandler","styles","form","bind","buttons","StyleSheet","create","marginTop"],"sources":["/home/schadrack/Documents/react native/react-native-authentication/components/Auth/AuthForm.js"],"sourcesContent":["import { useState } from 'react';\nimport { StyleSheet, View } from 'react-native';\n\nimport Button from '../ui/Button';\nimport Input from './Input';\n\nfunction AuthForm({ isLogin, onSubmit, credentialsInvalid }) {\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredConfirmEmail, setEnteredConfirmEmail] = useState('');\n  const [enteredPassword, setEnteredPassword] = useState('');\n  const [enteredConfirmPassword, setEnteredConfirmPassword] = useState('');\n\n  const {\n    email: emailIsInvalid,\n    confirmEmail: emailsDontMatch,\n    password: passwordIsInvalid,\n    confirmPassword: passwordsDontMatch,\n  } = credentialsInvalid;\n\n  function updateInputValueHandler(inputType, enteredValue) {\n    switch (inputType) {\n      case 'email':\n        setEnteredEmail(enteredValue);\n        break;\n      case 'confirmEmail':\n        setEnteredConfirmEmail(enteredValue);\n        break;\n      case 'password':\n        setEnteredPassword(enteredValue);\n        break;\n      case 'confirmPassword':\n        setEnteredConfirmPassword(enteredValue);\n        break;\n    }\n  }\n\n  function submitHandler() {\n    onSubmit({\n      email: enteredEmail,\n      confirmEmail: enteredConfirmEmail,\n      password: enteredPassword,\n      confirmPassword: enteredConfirmPassword,\n    });\n  }\n\n  return (\n    <View style={styles.form}>\n      <View>\n        <Input\n          label=\"Email Address\"\n          onUpdateValue={updateInputValueHandler.bind(this, 'email')}\n          value={enteredEmail}\n          keyboardType=\"email-address\"\n          isInvalid={emailIsInvalid}\n        />\n        {!isLogin && (\n          <Input\n            label=\"Confirm Email Address\"\n            onUpdateValue={updateInputValueHandler.bind(this, 'confirmEmail')}\n            value={enteredConfirmEmail}\n            keyboardType=\"email-address\"\n            isInvalid={emailsDontMatch}\n          />\n        )}\n        <Input\n          label=\"Password\"\n          onUpdateValue={updateInputValueHandler.bind(this, 'password')}\n          secure\n          value={enteredPassword}\n          isInvalid={passwordIsInvalid}\n        />\n        {!isLogin && (\n          <Input\n            label=\"Confirm Password\"\n            onUpdateValue={updateInputValueHandler.bind(\n              this,\n              'confirmPassword'\n            )}\n            secure\n            value={enteredConfirmPassword}\n            isInvalid={passwordsDontMatch}\n          />\n        )}\n        <View style={styles.buttons}>\n          <Button onPress={submitHandler}>\n            {isLogin ? 'Log In' : 'Sign Up'}\n          </Button>\n        </View>\n      </View>\n    </View>\n  );\n}\n\nexport default AuthForm;\n\nconst styles = StyleSheet.create({\n  buttons: {\n    marginTop: 12,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}